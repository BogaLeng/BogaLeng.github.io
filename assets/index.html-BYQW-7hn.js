import{_ as i,c as a,a as e,o as n}from"./app-M4d-cTHq.js";const l={};function h(t,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="一、什么是线程池" tabindex="-1"><a class="header-anchor" href="#一、什么是线程池"><span>一、什么是线程池</span></a></h2><p>线程池其实是一种<strong>池化</strong>的技术实现，池化技术的核心思想就是<strong>实现资源的复用</strong>，避免资源的重复创建和销毁带来的性能开销。线程池可以管理一堆线程，让线程执行完任务之后不进行销毁，而是继续去处理其它线程已经提交的任务。</p><p>这种池化的思想不止应用在线程这里，我们还有：<strong>内存池</strong>、<strong>常量池</strong>；计算机网络中，还有<strong>连接池</strong>，等等。</p><h2 id="二、线程池的七大参数" tabindex="-1"><a class="header-anchor" href="#二、线程池的七大参数"><span>二、线程池的七大参数</span></a></h2><p>源码中，<code>ThreadPoolExecutor</code>的其中一个构造方法如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ThreadPoolExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> corePoolSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                              int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> maximumPoolSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                              long</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> keepAliveTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                              TimeUnit unit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                              BlockingQueue</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Runnable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> workQueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                              ThreadFactory threadFactory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                              RejectedExecutionHandler handler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">		......</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么说其中一个？因为它还有很多<strong>重载</strong>的构造方法，可以省略某些参数，使用默认值，比如使用默认的<code>RejectedExecutionHandler</code>,这个参数表示当阻塞队列满了的时候，新进入任务的处理方法，默认是直接丢弃<code>AbortPolicy</code>。</p><p>JDK 自带的 <code>RejectedExecutionHandler</code> 实现有 4 种</p><ul><li>AbortPolicy：丢弃任务，抛出运行时异常</li><li>CallerRunsPolicy：由提交任务的线程来执行任务</li><li>DiscardPolicy：丢弃这个任务，但是不抛异常</li><li>DiscardOldestPolicy：从队列中剔除最先进入队列的任务，然后再次提交任务</li></ul><p>参数解释如下：</p><ul><li>corePoolSize：线程池中用来工作的核心线程数量。</li><li>maximumPoolSize：最大线程数，线程池允许创建的最大线程数。</li><li>keepAliveTime：超出 corePoolSize 后创建的线程存活时间或者是所有线程最大存活时间，取决于配置。</li><li>unit：keepAliveTime 的时间单位。</li><li>workQueue：任务队列，是一个阻塞队列，当线程数达到核心线程数后，会将任务存储在阻塞队列中。</li><li>threadFactory ：线程池内部创建线程所用的工厂。项目中我们通常对其重写，为了给线程按一定规则命名，便于出问题时排错。</li><li>handler：拒绝策略；当队列已满并且线程数量达到最大线程数量时，会调用该方法处理任务。</li></ul><h2 id="三、线程池的原理" tabindex="-1"><a class="header-anchor" href="#三、线程池的原理"><span>三、线程池的原理</span></a></h2><h3 id="_3-1-刚创建" tabindex="-1"><a class="header-anchor" href="#_3-1-刚创建"><span>3.1 刚创建</span></a></h3><p>刚创建出来的线程池中只有一个构造时传入的阻塞队列，里面并没有线程，如果想要在执行之前创建好核心线程数，可以调用 <code>prestartAllCoreThreads</code> 方法来实现，默认是没有线程的。</p><p><code>prestartAllCoreThreads</code>的源码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * Starts all core threads, causing them to idly wait for work. This</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * overrides the default policy of starting core threads only when</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * new tasks are executed.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@return</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> the number of threads started</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> prestartAllCoreThreads</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addWorker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">            ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-传入任务" tabindex="-1"><a class="header-anchor" href="#_3-2-传入任务"><span>3.2 传入任务</span></a></h3><p>当有线程通过 execute 方法提交了一个任务，会发生什么呢？</p><p>首先会去判断当前线程池的线程数是否小于<strong>核心线程数</strong>，也就是线程池构造时传入的参数 <code>corePoolSize</code>。如果小于，那么就直接通过 <code>ThreadFactory</code> 创建一个线程来执行这个任务。</p><p>接下来如果又提交了一个任务，也会按照上述的步骤去判断是否小于核心线程数，如果小于，还是会创建线程来执行任务，执行完之后也会从阻塞队列中获取任务。</p><p>这里有个细节，就是提交任务的时候，就算有线程池里的线程从阻塞队列中获取不到任务，如果线程池里的线程数还是小于核心线程数，那么依然会<strong>继续创建线程</strong>，而不是复用已有的线程。</p><p>如果线程池里的线程数不再小于核心线程数呢？那么此时就会尝试将任务放入<strong>阻塞队列</strong>中。</p><h3 id="_3-3-创建非核心线程" tabindex="-1"><a class="header-anchor" href="#_3-3-创建非核心线程"><span>3.3 创建非核心线程</span></a></h3><p>随着任务越来越多，队列已经满了，任务放入失败，怎么办呢？</p><p>此时会判断当前线程池里的线程数是否小于最大线程数，也就是入参时传入的<code>maximumPoolSize</code> 参数</p><p>如果小于最大线程数，那么也会创建非核心线程来执行提交的任务。</p><h3 id="_3-4-拒绝策略" tabindex="-1"><a class="header-anchor" href="#_3-4-拒绝策略"><span>3.4 拒绝策略</span></a></h3><p>随着任务越来越多，队列已经满了，任务放入失败。同时假如线程数已经达到最大线程数量。这个时候怎么办呢？</p><p>此时就会执行拒绝策略，也就是构造线程池的时候，传入的 <code>RejectedExecutionHandler</code> 对象，来处理这个任务。</p><h2 id="四、实际使用" tabindex="-1"><a class="header-anchor" href="#四、实际使用"><span>四、实际使用</span></a></h2><h3 id="_4-1-注意线程数" tabindex="-1"><a class="header-anchor" href="#_4-1-注意线程数"><span>4.1 注意线程数</span></a></h3><p>线程数的设置主要取决于业务是 IO 密集型还是 CPU 密集型。</p><p>CPU 密集型：指的是任务主要使用来进行大量的计算，没有什么导致线程阻塞。一般这种场景的线程数设置为 <code>CPU 核心数+1</code>。</p><p>IO 密集型：当执行任务需要大量的 io，比如磁盘 io，网络 io，可能会存在大量的阻塞，所以在 IO 密集型任务中使用多线程可以大大地加速任务的处理。一般线程数设置为 <code>2*CPU 核心数</code></p><p>Java 中用来获取 CPU 核心数的方法是：<code>Runtime.getRuntime().availableProcessors();</code></p><h3 id="_4-2-threadfactory" tabindex="-1"><a class="header-anchor" href="#_4-2-threadfactory"><span>4.2 ThreadFactory</span></a></h3><p>一般建议自定义线程工厂，构建线程的时候设置线程的名称，这样在查日志的时候就方便知道是哪个线程执行的代码。</p><h3 id="_4-3-有界队列" tabindex="-1"><a class="header-anchor" href="#_4-3-有界队列"><span>4.3 有界队列</span></a></h3><p>一般需要设置有界队列的大小，比如使用<code>LinkedBlockingQueue</code>在构造的时候可以传入参数来限制队列中任务数据的大小，这样就不会因为无限往队列中扔任务导致系统的Out of Memory。</p>`,39)]))}const r=i(l,[["render",h]]),d=JSON.parse('{"path":"/article/exgeihpe/","title":"Java线程池","lang":"zh-CN","frontmatter":{"title":"Java线程池","tags":["Java"],"createTime":"2025/04/25 00:53:21","permalink":"/article/exgeihpe/"},"headers":[],"readingTime":{"minutes":4.75,"words":1426},"git":{"updatedTime":1745602907000,"contributors":[{"name":"ZhangZhe","username":"ZhangZhe","email":"zhe2003@vip.qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/ZhangZhe?v=4","url":"https://github.com/ZhangZhe"}]},"filePathRelative":"java/ThreadPool-Java.md","categoryList":[{"id":"93f725","sort":10002,"name":"java"}]}');export{r as comp,d as data};
